import datetime
import hashlib
import json
from flask import Flask, jsonify
import mysql.connector

app = Flask(__name__)

# Подключение к базе данных MySQL
db = mysql.connector.connect(
    host="localhost",
    user="root",  #  имя пользователя MySQL
    password="",  #  пароль MySQL
    database="fighters"  #  название вашей базы данных MySQL
)
cursor = db.cursor()

class Blockchain:
    def __init__(self):
        self.chain = []
        self.create_block(proof=1, previous_hash='0')

    def create_block(self, proof, previous_hash):
        # Создание блока данных
        block = {
            'index': len(self.chain) + 1,
            'fio': '',
            'name_team': '',
            'date_of_birth': str(datetime.datetime.now()),
            'weight': 0.0,
            'kyu_dan': '',
            'city': '',
            'coach': '',
            'full_years': 0,
            'gender': '',
            'number': 0,
            'proof': proof,
            'previous_hash': previous_hash
        }

        self.chain.append(block)
        return block

    def print_previous_block(self):
        return self.chain[-1]

    def proof_of_work(self, previous_proof):
        new_proof = 1
        while True:
            # Вычисление proof для нового блока
            hash_operation = hashlib.sha256(
                str(new_proof**2 - previous_proof**2).encode()).hexdigest()
            if hash_operation[:5] == '00000':
                return new_proof
            new_proof += 1

    def hash(self, block):
        # Генерация хэша блока
        encoded_block = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(encoded_block).hexdigest()

    def chain_valid(self, chain):
        # Проверка целостности цепочки блоков
        previous_block = chain[0]
        block_index = 1
        while block_index < len(chain):
            block = chain[block_index]
            if block['previous_hash'] != self.hash(previous_block):
                return False
            previous_proof = previous_block['proof']
            proof = block['proof']
            hash_operation = hashlib.sha256(
                str(proof ** 2 - previous_proof ** 2).encode()).hexdigest()
            if hash_operation[:5] != '00000':
                return False
            previous_block = block
            block_index += 1
        return True

blockchain = Blockchain()

@app.route('/')
def index():
    return "Майнинг нового блока: /mine_block  " \
           "Отобразить блокчейн в формате json: /display_chain  " \
           "Проверка валидности блокчейна: /valid  "

@app.route('/mine_block', methods=['GET'])
def mine_block():
    previous_block = blockchain.print_previous_block()
    previous_proof = previous_block['proof']
    proof = blockchain.proof_of_work(previous_block['proof'])
    previous_hash = blockchain.hash(previous_block)
    block = blockchain.create_block(proof, previous_hash)
    response = {'message': 'A block is MINED',
                'index': block['index'],
                'fio': block['fio'],
                'name_team': block['name_team'],
                'date_of_birth': block['date_of_birth'],
                'weight': block['weight'],
                'kyu_dan': block['kyu_dan'],
                'city': block['city'],
                'coach': block['coach'],
                'full_years': block['full_years'],
                'gender': block['gender'],
                'number': block['number'],
                'proof': block['proof'],
                'previous_hash': block['previous_hash']}
    return jsonify(response), 200

@app.route('/display_chain', methods=['GET'])
def display_chain():
    return jsonify(chain=blockchain.chain, length=len(blockchain.chain)), 200

@app.route('/valid', methods=['GET'])
def valid():
    valid = blockchain.chain_valid(blockchain.chain)
    if valid:
        response = {'message': 'The Blockchain is valid.'}
    else:
        response = {'message': 'The Blockchain is not valid.'}
    return jsonify(response), 200

if __name__ == "__main__":
    app.run(debug=True)
